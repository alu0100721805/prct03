Autor : Juan José Gregorio Díaz Marrero  Turno Tarde Alu4386

Respuestas Practica 3 LPP 
18-) 

Resp: " => nil "

21-)

Resp: " La principal diferencia es que si ejecutamos el comando en irb mostrará "Hola Mundo" directamente y seguidamente se quedará esperando la consola a que se introduzca otro comando o se envie una señal de terminal la ejecución en IRB. En el caso de ejecutar el fichero irb simplemente ejecutará el fichero y no esperará la consola a que se introduzcan otros comandos.

26-)

 26.1-) Resp:  A la variable x antes de lanzar el pry se le habia asignado el valor "10" y su salida será:	
	"x=10".

 26.2-)	Resp: Se encuentra definido el método "hello": 
	"=> :hello "
	
 26.3-) Resp: Mostrará lo que hace el método en este caso "Hola Mundo"
	
	"Hello world".

 26.4-) Resp: muestra "bye bye world!!!".

 26.5-) Resp: Se asigna el valor a la variable x "=> "changed"".

 26.6-) Resp: Se muestra "program resumes here. Value of x is: changed."

27-) El interprete IRB no deja modificar el valor de los objetos a diferencia del "pry" que sí lo permite en tiempo real.

34-) La diferencia ente "\t\n", es que el intérprete en este caso interpola lo que esté dentro de las comillas dobles (quiere decir que se produce una tabulación y un retorno de carro en este caso). Y con las comillas simples simplemente se interpreta como una cadena de caracteres.

35-) %q sirve para poner comillas simples.

	%q{hello world\n} - Es una cadena de caracteres que contiene literalmente "'hello world\\n'".
	%q{'a' 'b' 'c'\n} - Es una cadena de caracteres que contiene literalmente "'a' 'b' 'c'\\n'".

36-) %Q se usa para poner comillas dobles sin poner backslashes.
	En ambos casos consite en una cadena de caracteres que en el caso de llevar comillas dobles lo interpolará el IRB.
	
	%Q{hello world\n} - Se muestra "hello world".

        %Q{"a" "b" "c"} - Se muestra "a" "b" "c".
	 
37-) En la variable c se almacena  "--4--\n--2--\n".

38-) En la variable c se almacena  "--\#{a}--\n--\#{b}--\n".

39-) 
	s[0,2]  = "he"
	s[-1,1] = "o"
	s[0,10] = "hello"

40-)   g = "hello world".

41-)   e = "...".

42-)  Salida =  "2 2 2 ".
43-)
	 Es un objeto de tipo array que contiene lo siguiente:
	 ["this", "is", "a", "test"]
	 Se muestra con la ejecución del comando puts lo siguiente:
	
	this
	is
	a
	test

44-) 	Es un objeto de tipo array que contiene cadenas sin interpolar ["\\t", "\\n"]
	Se muestra con la ejecución del comando puts lo siguiente:

	\t
	\n

45-)  Es un objeto de tipo array que contiene  cadenas que se interpolarán ["\t", "\n"]
	En pantalla se realiza una tabulación y un retorno de carro .

46-)	 nil es un objeto del tipo array con tres elementos nulos [nil, nil, nil].

47-)   zeros es un objeto del tipo array con tres elementos de valor 0 [0, 0, 0].

48-)   Array b =  [[1, 2], [3, 4]].

49-)   Array c =  [0, 2, 4].

50-)
	 a[1,1]   = ["b"].
	 a[-2,2]  = ["d", "e"].
	 a[0..2]  = ["a", "b", "c"].
	 a[0...1] = ["a"].
	 a[-2..-1] = ["d", "e"].
51-) 
	51.1-) a = ["A", "B", "c", "d", "e"].
	51.2-) a = ["A", "B", "C", "D", "E"].
	51.3-) a = [1, 2, 3, "A", "B", "C", "D", "E"].
	51.4-) a = [3, "A", "B", "C", "D", "E"].
	51.5-) a = [3, "A", "B", "C", "D", "Z"].
	51.6-) a = [3, "A", "B", "C", nil].

52-) 	a = (1...4).to_a nos genera un array desde 1 hasta 4-1 quedando el siguiente array : a =[1, 2, 3].
	a = a + [4, 5]  se añaden a "a" el elemento 4 y 5:  a = [1, 2, 3, 4, 5]
	a += [[6, 7, 8]] se añade un array en la posición quinta [6, 7, 8]: a = [1, 2, 3, 4, 5, [6, 7, 8]].
	a = a + 9 nos da un error "no se puede convertir el fixnum en array".

53-)    x = %w{a b c b a} genera el siguiente array: x = ["a", "b", "c", "d", "e"].
	x = x - %w{b c d} se quitan los elementos "b, c, d" del array: x = ["a", "a"].

54-)   Resultado = [0, 0, 0, 0, 0, 0, 0, 0].

55-)   a << 1  =  [1].
       a << 2 << 3  =  [1, 2, 3].
       a << [4, 5, 6] =  [1, 2, 3, [4, 5, 6]].
       a.concat [7, 8] concatena dos arrays quedando  "[1, 2, 3, [4, 5, 6], 7, 8]".
56-) 
       c = a | b unión  c = [1, 2, 3, 4, 5].
       d = b | a unión  d = [5, 4, 3, 2, 1].
       e = a & b intersección e= [2, 3, 4].
       f = b & a intersección (elementos comunes en ambos conjuntos)  f = [4, 3, 2].
 
57-)  
       a.to_a  nos genera un array  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
       b.to_a nos da [1, 2, 3, 4, 5, 6, 7, 8, 9].
       b.include? 10  no se encuentra el elemento en el array por lo tanto la salida es false.
       b.include? 8   no se encuentra el elemento en el array por lo tanto la salida es true.
       b.step(2) {|x| print "#{x} " }  aumenta de dos en dos y lo imprime hasta llegar al último elemento 1 3 5 7 9 => 1...10
       1..3.to_a nos da error "'to_a' es un método indefinido para el fixnum 3".

58-) 
	r.member? 50 = true.
	r.include? 99.9 = true.
	r.member? 99.9  =  true.

59-)
       true.class pertenece a la clase TrueClass.
       false.class este objeto pertenece a la clase  FalseClass.

       puts "hello" if 0  devuelve hello y el nil.
       puts "hello" if nil  devuelve  el nil.
       puts "hello" if "" muestra  "warning: string literal in condition"  y se muestra el hello y el nil.

60-)
	 x.class este objeto pertenece a la clase symbol.
	 x == 'sym' compara y  devuelve false.
	 x == :sym compara y  devuelve true.
	 z.class este objeto pertenece a la clase symbol.
	 x == 'sym'.to_sym  devuelve true.
	 x.to_s == 'sym'  devuelve true.

61-)     prynt s  muestra  Rub y el nil.
	 print s, t imprime RubJava.

62-)    "%d %s" % [3, "rubies"]"  devuelve "3 rubies".

63-)	 
	"x, y = 4, 5" se muestra  [4, 5].
	"z = x > y ? x : y" se muestra 5.
	"x, y, z = [1,2,3]" se muestra [1, 2, 3].

64-)
	x.keys nos devuelve las claves  [:a, :b].
	x.values nos devuelve los valores a las claves deacuerdo a su posición [1, 2].
	x = {:a=>1, :b=>2, :c=>3}.
	x = {:a=>1, :b=>2, :c=>3}.
	x = {:b=>2, :c=>3}.
	x.delete_if { |k,v| v % 2 == 0 } resutlado {:a=>1}.
	x = {:a=>1}.

65-) 
	La sentencia "counts = Hash.new(0)" crea un objeto del tipo hash (vacío) y lo almacena en counts.
	No existe diferencia, debido a que el comando "counts = {}" genera el mismo tipo de objeto hash (vacío).

66-)	 El comando 'hello world, hello LPP'.scan /\w+/  nos convierte la cadena entre comillas simples en un arra ["hello", "world", "hello", "LPP"].


